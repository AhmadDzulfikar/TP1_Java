package assignments.assignment4.page;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import assignments.assignment3.DepeFood;
import assignments.assignment3.Menu;
import assignments.assignment3.Restaurant;
import assignments.assignment3.User;
import assignments.assignment4.MainApp;
import assignments.assignment4.components.BillPrinter;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class CustomerMenu extends MemberMenu {
    private Stage stage;
    private Scene scene;
    private Scene addOrderScene;
    private Scene printBillScene;
    private Scene payBillScene;
    private Scene cekSaldoScene;
    private BillPrinter billPrinter;
    private static Label label = new Label();
    private MainApp mainApp;
    private List<Restaurant> restoList = new ArrayList<>();
    private User user;

    private ListView<String> menuItemListView = new ListView<>();
    private ComboBox<String> restaurantComboBox = new ComboBox<>();

    private ComboBox<String> restaurantComboBoxAddOrder = new ComboBox<>();

    public CustomerMenu(Stage stage, MainApp mainApp, User user) {
        this.stage = stage;
        this.mainApp = mainApp;
        this.user = user;
        this.scene = createBaseMenu();
        this.addOrderScene = createTambahPesananForm();
        this.billPrinter = new BillPrinter(stage, mainApp, this.user);
        this.printBillScene = createBillPrinter();
        this.payBillScene = createBayarBillForm();
        this.cekSaldoScene = createCekSaldoScene();
    }

    @Override
    public Scene createBaseMenu() {
        VBox menuLayout = new VBox(30);
        menuLayout.setAlignment(Pos.BOTTOM_CENTER);

        HBox buttonLayout = new HBox(130);
        menuLayout.setPadding(new Insets(0, 0, 40, 0));
        buttonLayout.setAlignment(Pos.BOTTOM_CENTER);

        Button buatPesananPage = new Button("Buat Pesanan");
        buatPesananPage.setOnAction(e -> stage.setScene(addOrderScene));

        Button cetakBillPage = new Button("Cetak Bill");
        cetakBillPage.setOnAction(e -> stage.setScene(printBillScene));

        Button bayarBillPage = new Button("Bayar Bill");
        bayarBillPage.setOnAction(e -> stage.setScene(payBillScene));

        Button cekSaldoPage = new Button("Cek Saldo");
        cekSaldoPage.setOnAction(e -> stage.setScene(cekSaldoScene));

        Button backButton = new Button("Log Out");
        backButton.setOnAction(e -> mainApp.logout());

        buttonLayout.getChildren().addAll(buatPesananPage, cetakBillPage, bayarBillPage, cekSaldoPage, backButton);

        menuLayout.getChildren().addAll(buttonLayout);

        return new Scene(menuLayout, 950, 527);
    }

    private Scene createTambahPesananForm() {
        VBox menuLayout = new VBox(10);
        menuLayout.setPadding(new Insets(20));

        Label restaurantLabel = new Label("Restaurant Name: ");
        restaurantComboBoxAddOrder.setItems(FXCollections.observableArrayList(getRestoNames()));
        restaurantComboBoxAddOrder.setPromptText("Select a restaurant");

        menuItemListView = new ListView<>();

        restaurantComboBoxAddOrder.setOnAction(e -> {
            String selectedRestaurant = restaurantComboBoxAddOrder.getValue();
            if (selectedRestaurant != null) {
                Restaurant restaurant = DepeFood.getRestaurantByName(selectedRestaurant);
                if (restaurant != null) {
                    List<String> menuItems = restaurant.getMenuItems().stream()
                        .map(menu -> menu.getNamaMakanan())
                        .collect(Collectors.toList());
                    menuItemListView.setItems(FXCollections.observableArrayList(menuItems));
                }
            }
        });

        // Add a TextField for date input
        Label dateLabel = new Label("Tanggal Pemesanan (DD/MM/YYYY):");
        TextField dateInput = new TextField();
        dateInput.setPromptText("DD/MM/YYYY");

        // Add a button to submit the order
        Button submitButton = new Button("Buat Pesanan");
        submitButton.setOnAction(e -> {
            String tanggalPemesanan = dateInput.getText();
            if (!isValidDate(tanggalPemesanan)) {
                showAlert("Error", "Invalid Date Format", "Format tanggal harus format DD/MM/YYYY", AlertType.ERROR);
                return;
            }

            String selectedRestaurant = restaurantComboBoxAddOrder.getValue();
            List<String> selectedItems = new ArrayList<>(menuItemListView.getSelectionModel().getSelectedItems());

            if (selectedRestaurant != null && !selectedItems.isEmpty()) {
                handleBuatPesanan(selectedRestaurant, tanggalPemesanan, selectedItems);
            } else {
                showAlert("Error", "Incomplete Form", "Please select a restaurant and menu items.", AlertType.ERROR);
            }
        });

        menuLayout.getChildren().addAll(restaurantLabel, restaurantComboBoxAddOrder, menuItemListView, dateLabel, dateInput, submitButton);

        Button backButton = new Button("Kembali");
        backButton.setOnAction(e -> stage.setScene(scene));
        menuLayout.getChildren().add(backButton);

        return new Scene(menuLayout, 400, 600);
    }

    private boolean isValidDate(String date) {
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
        dateFormat.setLenient(false);
        try {
            dateFormat.parse(date);
            return true;
        } catch (ParseException e) {
            return false;
        }
    }

    private void handleBuatPesanan(String namaRestoran, String tanggalPemesanan, List<String> menuItems) {
        // Implementasi logika pembuatan pesanan
        String orderId = DepeFood.handleBuatPesanan(namaRestoran, tanggalPemesanan, menuItems.size(), menuItems);
        if (orderId != null) {
            showAlert("Success", "Order Created", "Pesanan berhasil dibuat dengan ID: " + orderId, AlertType.INFORMATION);
        } else {
            showAlert("Error", "Order Failed", "Gagal membuat pesanan. Coba lagi.", AlertType.ERROR);
        }
    }

    private Scene createBillPrinter(){
        // TODO: Implementasikan method ini untuk menampilkan page cetak bill

        return null;
    }

    private Scene createBayarBillForm() {
        // TODO: Implementasikan method ini untuk menampilkan page bayar bill
        VBox menuLayout = new VBox(10);

        return new Scene(menuLayout, 400,600);
    }

    private Scene createCekSaldoScene() {
        // TODO: Implementasikan method ini untuk menampilkan page cetak saldo
        VBox menuLayout = new VBox(10);

        return new Scene(menuLayout, 400,600);
    }

    private void updateComboBoxRestaurants() {
        List<String> restaurantNames = getRestoNames();
        restaurantComboBoxAddOrder.setItems(FXCollections.observableArrayList(restaurantNames));
        restaurantComboBoxAddOrder.setPromptText("Select a restaurant");
    }

    private List<String> getRestoNames() {
        return DepeFood.getRestoList().stream().map(Restaurant::getNama).collect(Collectors.toList());
    }

    protected void showAlert(String title, String header, String content, Alert.AlertType c) {
        Alert alert = new Alert(c);
        alert.setTitle(title);
        alert.setHeaderText(header);
        alert.setContentText(content);
        alert.showAndWait();
    }

    protected void refresh(){
        // TODO: Implemenetasi method ini untuk merefresh data yang dimiliki aplikasi
    }
}
